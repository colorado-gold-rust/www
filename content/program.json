[
    {
        "title": "Opening Keynote",
        "id": "keynote",
        "abstract": "Internet communication has become nearly ubiquitous in our lives, most of which is happening via centralized services and infrastructure. It might even sometimes seem like there's no real alternative to staying in touch with people this way. And while maybe not relevant to everyone’s everyday life, at times of crisis relying on centralized services and infrastructure  can become dangerous. During the 2011 internet blackout in Egypt and more recently, in Hong Kong during the 2019 protests, Telegram, an encrypted messaging app, was DDoSed and resulted in activists and protestors losing their ability to organize. It was the former event that inspired the creation of an ad-hoc communication app, called \"qaul.net\"! Decentralized infrastructure and services are a reality that save lives and enable people to communicate freely, without government censorship or surveillance. In this talk we will cover some of the projects in existence and technologies in use. Finally, we will talk about the future of qaul.net, and how an aging codebase is being re-written in Rust to make it more secure, scalable, and future-proof!",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Katharina Fey",
                "id": "k-fey",
                "bio": "filling in later",
                "avatar": "avatars/k-fey.jpg"
            }
        ]
    },
    {
        "title": "Futures From the Ground Up (For Beginners, by Beginners) ",
        "id": "futures",
        "abstract": "Rust Futures are a major new addition to the language. With many moving parts and layers of abstraction: future trait, Tokio, Mio, async, await, and more. In this talk, we cut through the layers by implementing our own future from the ground up. First, by implementing the future trait for our own asynchronous IO computation, then by implementing a future runtime (executor and reactor) to run it on. Async/await syntax included!",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Omar S. Navarro Leija",
                "id": "o-leija",
                "bio": "I am 4th year PhD student at the University Of Pennsylvania. I am interested in systems programming, operating systems, and concurrency. I spend a lot of time thinking about programming, and I am lucky enough to get to program in Rust for my research projects! I also had the privileged to teach UPenn's Rust Programming class, and will be teaching it again Fall 2019!",
                "avatar": "avatars/o-leija.jpg"
            }
        ]
    },
    {
        "title": "Option and Result: Cooking a Better Cupcake",
        "id": "cupcake",
        "abstract": "Idiomatic Rust code sometimes expects familiarity with various concepts and design patterns from functional languages like Haskell and OCaml. Using monads for error handling, as an example, might be a familiar process to programmers with a background in functional programming, but this can be a challenging idea to people who are self-taught, or come from other C-based languages like JavaScript.\r\n\r\nIn this talk, [Speaker] will help you understand what options and results _are_, and why they are useful, by helping you cook a better cupcake.\r\n",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "data-pup",
                "id": "data-pup",
                "bio": "Katie is a software engineer, an experimental musician, and a dog on the internet. She maintains `twiggy`, a code size profiler for WebAssembly. She is a Recurse Center alumna and a nocturnal troublemaker. She currently resides in New York with Pudding, an adorable tabby cat.",
                "avatar": "avatars/data-pup.jpg"
            }
        ]
    },
    {
        "title": "A Tour of Empirical Verification in Rust",
        "id": "verification",
        "abstract": "You've written a Rust program, but how do you know if it does the right thing?  You run it, of course!  But how much of the program do you run at a time? How do you execute it with useful inputs? How do you confirm good behavior without getting lost in the weeds of implementation details? How can you tell if your testing matters?\r\n\r\nThis talk will teach participants Rust's tools and techniques for empirical verification. We'll start with unit and integration testing options, explore snapshots and fuzzing, and end with state-of-the-art property-based and mutation testing.  ",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Zack Pierce",
                "id": "z-pierce",
                "bio": "Zack Pierce is a Principal Software Engineer at Auxon Corporation, where he applies Rust to develop high-assurance cyber-physical systems. His long term passion for quality software grew out of prior experiences across several industries. Previously, Zack has helped build large scale data analysis pipelines at New Relic and provided technical leadership at an education innovation lab. He contributes to open-source testing tools and has built several corporate-internal test frameworks.",
                "avatar": "avatars/z-pierce.jpg"
            }
        ]
    },
    {
        "title": "BFFFS: a novel SMR-native file system written in Rust",
        "id": "bfffs",
        "abstract": "SMR (shingled magnetic recording) hard drives have higher densities than traditional hard drives, but impose a purely-sequential write order constraint on their users.  This is an imposing barrier to adapting existing file systems; few can use SMR hard drives.  This talk presents BFFFS, a novel file system built from scratch to be SMR-compatible.  It's a copy-on-write file system, with all the usual features like snapshots and transactional integrity.  And it's written in Rust.",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Alan Somers",
                "id": "a-somers",
                "bio": "Alan Somers has a background in embedded systems and operating systems.  He contributed many patches to ZFS, but discovered that that file system could never take advantage of SMR hard drives.  So he decided to write his own.  He is also maintainer or co-maintainer of eleven other crates, plus the Rust mock_shootout.  When not working with Rust, he frequently commits to FreeBSD, and recently rewrote its fusefs(5) driver.",
                "avatar": "avatars/a-somers.jpg"
            }
        ]
    },
    {
        "title": "Artisanal Rendering: Make Your Own Computer Art!",
        "id": "rendering",
        "abstract": "You don't need to learn complex graphics APIs to make cool art!\r\nLearn how to use Rust to turn a grid of pixels into geometric patterns, intricate fractals, and fantastical landscapes. This talk will show classic graphics techniques like fractals and raymarching that are easy to implement. It will also present these graphics problems as a great place to learn to improve the performance of your code using threads and SIMD. This talk is focused on fun software rendering rather than practical modern computer graphics, but that doesn't mean you won't learn something useful along the way!",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Cassie Jones",
                "id": "c-jones",
                "bio": "Cassie is a student at the University of Michigan, studying computer science.\r\nThey've been making art with formulas for 6 years, ever since they discovered Iñigo Quilez's articles. They're a voracious polyglot programmer, and have been programming in Rust since before 1.0. You can find them on twitter at @porglezomp."
            }
        ]
    },
    {
        "title": "Rustaceans! We Can Help!",
        "id": "we-can-help",
        "abstract": "Are you a new rustacean trying to take your first steps into rust's open source\r\ncommunity? Are you trying to meet people in the rust community but don't know\r\nwhere to start? Are you a maintainer interested in attracting new contributors?\r\nThen have I got the talk for you! Together we will explore some approaches to\r\nfinding issues to work on, finding new projects, structuring your projects to\r\nhelp new contributors, and meeting other rust developers to become a happy and\r\nsuccessful contributor in the rust open source community.",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Jane Lusby",
                "id": "j-lusby",
                "bio": "going to fill this in later",
                "avatar": "avatars/j-lusby.jpg"
            }
        ]
    },
    {
        "title": "Are we actually IDE yet? - A look on current Rust IDE story",
        "id": "ide",
        "abstract": "Ever since appearing on the Rust 2017 roadmap, IDE support has been and continues to be a highly-requested feature that should boost productivity when working with Rust code.\r\nDespite landscape shifting a lot during these last 3 years, including proliferation of new tools and improved integration between tools, it feels like the Rust IDE story is not yet complete.\r\nThis talk will explore the current status of the Rust Language Server (RLS) and Rust Analyzer, which is a main focus of the \"RLS 2.0\" compiler working group.",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Igor Matuszewski",
                "id": "i-matuszewski",
                "bio": "Maintainer of the Rust Language Server (RLS), part of the Rust dev tools team, focused on (you guessed it!) IDE and dev tooling.\r\nBeing a good Rustacean, he uses the entire power of oxidation to help people fight interesting problems and not their editors.\r\nLikes \uD83D\uDC31, \u2328 and \uD83C\uDF5C."
            }
        ]
    },
    {
        "title": "Practical tips about using DOM and JS APIs from Rust",
        "id": "dom-js",
        "abstract": "It's possible to write a web application completely in Rust. Let's review in details how to work with DOM, subscribe for events, handle errors and so on. Though most of the web functionality is covered by wasm-bindgen, the provided api is still low level and sometimes may require a bit of boilerplate. Let's check how we can reduce the boilerplate and be more productive while working with web-sys and js-sys crates.",
        "format": "Talk",
        "track": null,
        "tags": [],
        "video_url": null,
        "slides_url": null,
        "speakers": [
            {
                "name": "Ilya Baryshnikov",
                "id": "i-baryshnikov",
                "bio": "Previously a JavaScript developer, now I use Rust and WebAssembly at work. I'm a member of Rust and WebAssembly working group and contributor to wasm-bindgen and wasm-pack crates. In my free time I play classical guitar, computer games, and enjoy different activities like roller skating.",
                "avatar": "avatars/i-baryshnikov.jpg"
            }
        ]
    }
]
